function pdsh-is-grp-exists {
  $([ ! -z $1 ] && [ -e "$HOME/.dsh/group/$1" ])
  echo $?
}
function pdsh-grp-ls { ls $HOME/.dsh/group/; }

function pdsh-grp-cat {
  if [ "$(pdsh-is-grp-exists $1)" == "0" ]; then
    cat "$HOME/.dsh/group/$1";
  else
    echo "no such group: $1"
    echo "pdsh-grp-ls:"
    pdsh-grp-ls
  fi
}

# prety print with dshbak
function pdsh-pp { pdsh $@ | dshbak; }
function pdsh-pp-c { pdsh $@ | dshbak -c; } # merge duplicated outputs

function pdsh-inet-addr { pdsh $@ 'bash -c '/sbin/ifconfig | egrep "inet addr" | grep -v "127.0.0.1"''; }

function pdsh-nodeattr-cmd {
  hosts=`nodeattr -n $1`
  shift
  echo "HOSTS:"
  echo ""
  echo "$hosts"
  echo ""
  echo "Execute command:" 
  echo ""
  echo "  ssh -t HOST \"$*\""
  echo ""
  while true; do
    read -p "Do you execute the command on all hosts? " yn
    case $yn in
      [Yy]* ) 
        for h in $hosts; do
          echo "Execute on $h:"
          ssh -t $h $*
          echo "Completed on $h"
          echo ""
        done
        break;;
      [Nn]* ) break;;
      * ) echo "Please answer yes or no.";;
    esac
  done
}

# copy public key string to specified remote user.
function pdsh-nodeattr-cmd-copy-pubkey {
  if [ $# -ne 3 ]; then
    echo "USAGE: pdsh-nodeattr-cmd-copy-pubkey <nodeattr> <username> <public_key_string>"
    exit 1
  fi

  NODE_ATTR_GRP_NAME=$1
  USER=$2
  PUB_KEY=$3
  KEY=$(echo ${PUB_KEY} | awk '{print $2;}')
  HOME_DIR=/home/${USER}

  echo NODE_ATTR_GRP_NAME=${NODE_ATTR_GRP_NAME}
  echo USER=${USER}
  echo PUB_KEY=${PUB_KEY}
  echo KEY=${KEY}
  echo HOME_DIR=${HOME_DIR}
  
  pdsh-nodeattr-cmd ${NODE_ATTR_GRP_NAME} "sudo -u ${USER} bash -c 'mkdir -p ${HOME_DIR}/.ssh; chmod 700 ${HOME_DIR}/.ssh; touch ${HOME_DIR}/.ssh/authorized_keys; chmod 600 ${HOME_DIR}/.ssh/authorized_keys; if grep --quiet \\\"${KEY}\\\" ${HOME_DIR}/.ssh/authorized_keys ; then echo \\\"Public key already exists.\\\"; else echo \\\"Public key does not exists. Append it.\\\"; echo ${PUB_KEY} >> ${HOME_DIR}/.ssh/authorized_keys; fi'"
}

function pdsh-grp-cmd {
  if [ "$(pdsh-is-grp-exists $1)" == "0" ]; then
    hosts=`cat "$HOME/.dsh/group/$1"`
    shift
    echo "HOSTS:"
    echo ""
    echo "$hosts"
    echo ""
    echo "Execute command:" 
    echo ""
    echo "  ssh -t HOST \"$*\""
    echo ""
    while true; do
      read -p "Do you execute the command on all hosts? " yn
      case $yn in
        [Yy]* ) 
          for h in $hosts; do
            echo "Execute on $h:"
            ssh -t $h $*
            echo "Completed on $h"
            echo ""
          done
          break;;
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.";;
      esac
    done
  else
    echo "no such group: $1"
    echo "pdsh-grp-ls:"
    pdsh-grp-ls
  fi
}

function pdsh-grp-expand-cmd-args {
  if [ "$(pdsh-is-grp-exists $1)" == "0" ]; then
    hosts=`cat "$HOME/.dsh/group/$1" | tr '\n' ' '`
    shift
    echo "HOSTS:"
    echo ""
    echo "  $hosts"
    echo ""
    echo "Execute command:" 
    echo ""
    echo "  $* $hosts"
    echo ""
    while true; do
      read -p "Do you execute the command? " yn
      case $yn in
        [Yy]* ) 
          $* $hosts
          echo "COMPLETE pdsh-grp-expand-cmd-args"
          break;;
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.";;
      esac
    done
  else
    echo "no such group: $1"
    echo "pdsh-grp-ls:"
    pdsh-grp-ls
  fi
}
